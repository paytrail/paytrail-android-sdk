/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport",
)

package fi.paytrail.sdk.apiclient.models

import kotlinx.serialization.Contextual
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * The returned fields can be filtered out by specifying \"reportFields\" parameter
 *
 * @param entryDate When the payment was paid or initialized
 * @param created Hour and minute of the payment creation
 * @param amount Payment amount in Euros
 * @param status Payment status
 * @param firstname First name
 * @param familyname Last name
 * @param description Payment description
 * @param reference Merchant's reference
 * @param paymentMethod Payment method
 * @param stamp Payment Stamp
 * @param address Delivery address
 * @param postcode Postal code
 * @param postoffice Post office
 * @param country Country of delivery
 * @param checkoutReference Checkout reference
 * @param archiveNumber Archive number
 * @param payerName Name from bank
 * @param settlementId Settlement (report) id
 * @param settlementDate When the payment is settled
 * @param originalTradeReference Merchant's reference of the original payment in case of refund
 * @param vatPercentage Payment VAT percentage
 * @param vatAmount Payment VAT amount in Euros
 * @param paymentMethodFee Payment method fee in Euros
 * @param paymentMethodCommission Payment method commission amount in Euros
 * @param shopInShopCommission Payment method commission amount in Euros
 * @param shopInShopCommissionVatPercentage Payment method commission VAT percentage
 * @param shopInShopCommissionVatAmount Payment method commission VAT amount in Euros
 * @param refunditems Contains a `|` (pipe) -delimited list of *stamp*:*amount* pairs. Pairs are delimited by a `:` (colon). Stamp refers to the payment item's stamp that was refunded.
 */
@Serializable
data class PaymentReportCallbackJSON(

    /* When the payment was paid or initialized */
    @SerialName(value = "entryDate")
    val entryDate: kotlin.String? = null,

    /* Hour and minute of the payment creation */
    @SerialName(value = "created")
    val created: kotlin.String? = null,

    /* Payment amount in Euros */
    @SerialName(value = "amount")
    val amount: kotlin.Float? = null,

    /* Payment status */
    @SerialName(value = "status")
    val status: PaymentReportCallbackJSON.Status? = null,

    /* First name */
    @SerialName(value = "firstname")
    val firstname: kotlin.String? = null,

    /* Last name */
    @SerialName(value = "familyname")
    val familyname: kotlin.String? = null,

    /* Payment description */
    @SerialName(value = "description")
    val description: kotlin.String? = null,

    /* Merchant's reference */
    @SerialName(value = "reference")
    val reference: kotlin.String? = null,

    /* Payment method */
    @SerialName(value = "paymentMethod")
    val paymentMethod: kotlin.String? = null,

    /* Payment Stamp */
    @SerialName(value = "stamp")
    val stamp: kotlin.String? = null,

    /* Delivery address */
    @SerialName(value = "address")
    val address: kotlin.String? = null,

    /* Postal code */
    @SerialName(value = "postcode")
    val postcode: kotlin.String? = null,

    /* Post office */
    @SerialName(value = "postoffice")
    val postoffice: kotlin.String? = null,

    /* Country of delivery */
    @SerialName(value = "country")
    val country: kotlin.String? = null,

    /* Checkout reference */
    @SerialName(value = "checkoutReference")
    val checkoutReference: kotlin.String? = null,

    /* Archive number */
    @SerialName(value = "archiveNumber")
    val archiveNumber: kotlin.String? = null,

    /* Name from bank */
    @SerialName(value = "payerName")
    val payerName: kotlin.String? = null,

    /* Settlement (report) id */
    @Contextual @SerialName(value = "settlementId")
    val settlementId: java.math.BigDecimal? = null,

    /* When the payment is settled */
    @SerialName(value = "settlementDate")
    val settlementDate: kotlin.String? = null,

    /* Merchant's reference of the original payment in case of refund */
    @SerialName(value = "originalTradeReference")
    val originalTradeReference: kotlin.String? = null,

    /* Payment VAT percentage */
    @SerialName(value = "vatPercentage")
    val vatPercentage: kotlin.Float? = null,

    /* Payment VAT amount in Euros */
    @SerialName(value = "vatAmount")
    val vatAmount: kotlin.Float? = null,

    /* Payment method fee in Euros */
    @SerialName(value = "paymentMethodFee")
    val paymentMethodFee: kotlin.Float? = null,

    /* Payment method commission amount in Euros */
    @SerialName(value = "paymentMethodCommission")
    val paymentMethodCommission: kotlin.Float? = null,

    /* Payment method commission amount in Euros */
    @SerialName(value = "shopInShopCommission")
    val shopInShopCommission: kotlin.Float? = null,

    /* Payment method commission VAT percentage */
    @SerialName(value = "shopInShopCommissionVatPercentage")
    val shopInShopCommissionVatPercentage: kotlin.Float? = null,

    /* Payment method commission VAT amount in Euros */
    @SerialName(value = "shopInShopCommissionVatAmount")
    val shopInShopCommissionVatAmount: kotlin.Float? = null,

    /* Contains a `|` (pipe) -delimited list of *stamp*:*amount* pairs. Pairs are delimited by a `:` (colon). Stamp refers to the payment item's stamp that was refunded. */
    @SerialName(value = "refunditems")
    val refunditems: kotlin.String? = null,

) {

    /**
     * Payment status
     *
     * Values: New,Paid,WaitingForApproval,Cancelled,Timeout,Halted,Delayed,PaidAndSettled
     */
    @Serializable
    enum class Status(val value: kotlin.String) {
        @SerialName(value = "New")
        New("New"),

        @SerialName(value = "Paid")
        Paid("Paid"),

        @SerialName(value = "waiting for approval")
        WaitingForApproval("waiting for approval"),

        @SerialName(value = "Cancelled")
        Cancelled("Cancelled"),

        @SerialName(value = "Timeout")
        Timeout("Timeout"),

        @SerialName(value = "Halted")
        Halted("Halted"),

        @SerialName(value = "Delayed")
        Delayed("Delayed"),

        @SerialName(value = "Paid and settled")
        PaidAndSettled("Paid and settled"),
    }
}
